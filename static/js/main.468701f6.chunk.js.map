{"version":3,"sources":["img/sunny.svg","img/cloudy.svg","img/rainy.svg","img/foggy.svg","img/snowy.svg","img/stormy.svg","Components/Mainblock.js","Components/Hourcard.js","Components/Scroll.js","Components/Hourly.js","Components/Weekday.js","Components/Weekly.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Mainblock","states","currentWeatherState","weatherData","current","weather","id","weatherStateName","weatherImagePlaceholder","require","weatherIcon","console","log","className","href","target","class","src","alt","cityName","Math","round","temp","uvi","humidity","wind_speed","pressure","Hourcard","hour","description","condition","Scroll","props","children","Hourly","currentTime","Datetime","hours","hourly","ch","Number","cardList","Array","from","filter","item","index","map","key","main","Weekday","day","month","dayOfWeek","dayTemp","nightTemp","Weekly","weekdays","daily","dayOfMonth","nextWeek","weatherCondition","timeDifference","dt","feels_like","night","App","locateClient","clientIp","fetch","then","data","json","locationInfo","setState","userLat","location","lat","userLng","lng","city","cityArray","cityNameFiltered","forEach","letter","cityNameNoSpace","getWeatherData","state","userCity","weatherInfo","currentDt","getCurrentDate","timestamp","data2","userIp","undefined","ip","IPv4","siteContent","this","document","querySelector","classList","add","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.468701f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunny.346b346f.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.bd652b9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy.075febfd.svg\";","module.exports = __webpack_public_path__ + \"static/media/foggy.7ee70f9f.svg\";","module.exports = __webpack_public_path__ + \"static/media/snowy.b3673467.svg\";","module.exports = __webpack_public_path__ + \"static/media/stormy.f50dfdb7.svg\";","import React from 'react';\r\nimport '../Styles/Mainblock.css';\r\nimport '../WebFont/font-css/LineIcons.css';\r\n\r\n\r\nfunction Mainblock({states}) {\r\n\r\n    let currentWeatherState = states.weatherData.current.weather[0].id;\r\n    let weatherStateName = 'Sunny';\r\n\r\n    //Choosing the weather name\r\n\r\n    if(currentWeatherState>800){\r\n      weatherStateName='Cloudy';\r\n    }\r\n    else if(currentWeatherState>799){\r\n      weatherStateName = 'Sunny';\r\n    }\r\n    else if(currentWeatherState>700){\r\n      weatherStateName = 'Foggy';\r\n    }\r\n    else if(currentWeatherState>599){\r\n      weatherStateName = 'Snowy';\r\n    }\r\n    else if(currentWeatherState>299){\r\n      weatherStateName = 'Rainy';\r\n    }\r\n    else {\r\n      weatherStateName = 'Stormy';\r\n    }\r\n\r\n    //Choosing the weather image\r\n\r\n    let weatherImagePlaceholder = require('../img/sunny.svg');\r\n\r\n    switch(weatherStateName) {\r\n      case 'Sunny': weatherImagePlaceholder = require('../img/sunny.svg');\r\n      break;\r\n      case 'Cloudy': weatherImagePlaceholder = require('../img/cloudy.svg');\r\n      break;\r\n      case 'Rainy': weatherImagePlaceholder = require('../img/rainy.svg');\r\n      break;\r\n      case 'Foggy': weatherImagePlaceholder = require('../img/foggy.svg');\r\n      break;\r\n      case 'Snowy': weatherImagePlaceholder = require('../img/snowy.svg');\r\n      break;\r\n      case 'Stormy': weatherImagePlaceholder = require('../img/stormy.svg');\r\n      break;\r\n      default: weatherImagePlaceholder = require('../img/sunny.svg');\r\n    }\r\n\r\n    //Choosing correct weather icon\r\n\r\n    let weatherIcon = 'lni lni-sun';\r\n\r\n    switch(weatherStateName) {\r\n      case 'Sunny': weatherIcon = 'lni lni-sun';\r\n      break;\r\n      case 'Cloudy': weatherIcon = 'lni lni-cloud';\r\n      break;\r\n      case 'Rainy': weatherIcon = 'lni lni-rain';\r\n      break;\r\n      case 'Foggy': weatherIcon = 'lni lni-cloud';\r\n      break;\r\n      case 'Snowy': weatherIcon = 'lni lni-star-empty';\r\n      break;\r\n      case 'Stormy': weatherIcon = 'lni lni-thunder';\r\n      break;\r\n      default: weatherIcon = 'lni lni-sun';\r\n    }\r\n\r\n    let current = states.weatherData.current;\r\n    console.log(weatherStateName+'_mb mainblock');\r\n    return (\r\n      <div className={`mainblock ${weatherStateName+'_mb'}`}>\r\n        <div className=\"author\">\r\n          <p className={`author-name ${weatherStateName+'_c1'}`}>by Seymur Rahimov</p>\r\n          <a href=\"https://www.instagram.com/noiseymur\" target=\"blank\"><i class={`lni lni-instagram-filled ${weatherStateName+'_c1'}`}></i></a>\r\n          <a href=\"https://www.facebook.com/noiseymur\" target=\"blank\"><i class={`lni lni-facebook-original ${weatherStateName+'_c1'}`}></i></a>\r\n        </div>\r\n        <div className=\"top\">\r\n          <div className=\"lside\">\r\n            <img className={weatherStateName} src={weatherImagePlaceholder} alt=\"weather-icon\"/>\r\n          </div>\r\n          <div className=\"rside\">\r\n            <p className=\"today-its\">Today it's</p>\r\n            <div className=\"headers\">\r\n              <h1 className={`main ${weatherStateName+'_c2'}`}>{weatherStateName}</h1>\r\n              <h1 className={`main2 ${weatherStateName+'_c1'}`}>{weatherStateName}</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bottom\">\r\n          <div className=\"main-info\">\r\n            <p>in</p>\r\n            <div className=\"underlined\">\r\n              <p className=\"loc-name\">{states.cityName}, <span>Azerbaijan</span>\r\n              </p>\r\n              <i className={weatherIcon}></i>\r\n              <p className=\"current-deg\">{Math.round(current.temp)} °C</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"extra-data\">\r\n            <div className=\"default-names\">\r\n              <div className=\"name-and-line\">\r\n                <p>UV index:</p>\r\n                <div className=\"dashed-line\"></div>\r\n              </div>\r\n              <div className=\"name-and-line\">\r\n                <p>Humidity:</p>\r\n                <div className=\"dashed-line\"></div>\r\n              </div>\r\n              <div className=\"name-and-line\">\r\n                <p>Wind speed:</p>\r\n                <div className=\"dashed-line\"></div>\r\n              </div>\r\n              <div className=\"name-and-line\">\r\n                <p>Atmospheric pressure:</p>\r\n                <div className=\"dashed-line\"></div>\r\n              </div>\r\n            </div>\r\n            <div className=\"variable-data\">\r\n              <p className=\"uv-index\">{current.uvi}</p>\r\n              <p className=\"humidity\">{current.humidity}%</p>\r\n              <p className=\"wind-speed\">{current.wind_speed} m/s</p>\r\n              <p className=\"atm-pressure\">{current.pressure/10} kPa</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Mainblock;","import React from 'react';\r\nimport '../Styles/Hourcard.css';\r\nimport '../WebFont/font-css/LineIcons.css';\r\n\r\nfunction Hourcard ({hour,temp,description,condition}) {\r\n\r\n\r\n    //Choosing the weather name\r\n\r\n    let weatherStateName = 'Sunny';\r\n\r\n    if(condition>800){\r\n        weatherStateName='Cloudy';\r\n      }\r\n      else if(condition>799){\r\n        weatherStateName = 'Sunny';\r\n      }\r\n      else if(condition>700){\r\n        weatherStateName = 'Foggy';\r\n      }\r\n      else if(condition>599){\r\n        weatherStateName = 'Snowy';\r\n      }\r\n      else if(condition>299){\r\n        weatherStateName = 'Rainy';\r\n      }\r\n      else {\r\n        weatherStateName = 'Stormy';\r\n      }\r\n  \r\n      //Choosing correct weather icon\r\n  \r\n      let weatherIcon = 'lni lni-sun';\r\n  \r\n      switch(weatherStateName) {\r\n        case 'Sunny': weatherIcon = 'lni lni-sun';\r\n        break;\r\n        case 'Cloudy': weatherIcon = 'lni lni-cloud';\r\n        break;\r\n        case 'Rainy': weatherIcon = 'lni lni-rain';\r\n        break;\r\n        case 'Foggy': weatherIcon = 'lni lni-cloud';\r\n        break;\r\n        case 'Snowy': weatherIcon = 'lni lni-star-empty';\r\n        break;\r\n        case 'Stormy': weatherIcon = 'lni lni-thunder';\r\n        break;\r\n        default: weatherIcon = 'lni lni-sun';\r\n      }\r\n\r\n    return (\r\n        <div className=\"hour-card\">\r\n            <div className=\"l-field\">\r\n                <p className=\"hour\">{hour}<span className=\"minute\">00</span></p>\r\n                <p className=\"w-description\">{description}</p>\r\n            </div>\r\n            <div className=\"r-field\">\r\n                <p className=\"degree\">{temp}°C</p>\r\n                <i className={weatherIcon}></i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hourcard;","import React from 'react';\r\nimport '../Styles/Scroll.css';\r\n\r\nfunction Scroll (props) {\r\n    return (\r\n        <div className=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport '../Styles/Hourly.css';\r\nimport Hourcard from './Hourcard';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nfunction Hourly({states}) {\r\n\r\n    let currentTime = states.currentTime.Datetime;\r\n    let hours = states.weatherData.hourly;\r\n    console.log(currentTime);\r\n    let ch = Number(currentTime[11]+currentTime[12]);\r\n    let cardList = Array.from(hours).filter((item,index)=>{\r\n        return index>0 && index<13\r\n    })\r\n    \r\n    return (\r\n        <div className=\"hourly\">\r\n            <div className=\"hourly-forecast\">\r\n                <p>Hourly Forecast</p>\r\n            </div>\r\n            <Scroll className=\"hour-cards\">\r\n                {cardList.map((item,index)=>{\r\n                    ch=ch+1;\r\n                    return <Hourcard key={index} hour={ch} temp={Math.round(item.temp)} description={item.weather[0].main} condition={item.weather[0].id}/>\r\n                })}\r\n            </Scroll>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Hourly;","import React from 'react';\r\nimport '../Styles/Weekday.css';\r\nimport '../WebFont/font-css/LineIcons.css';\r\n\r\nfunction Weekday ({day,month,dayOfWeek,dayTemp,nightTemp,condition}) {\r\n\r\n\r\n    //Choosing the weather name\r\n\r\n    let weatherStateName = 'Sunny';\r\n\r\n    if(condition>800){\r\n        weatherStateName='Cloudy';\r\n      }\r\n      else if(condition>799){\r\n        weatherStateName = 'Sunny';\r\n      }\r\n      else if(condition>700){\r\n        weatherStateName = 'Foggy';\r\n      }\r\n      else if(condition>599){\r\n        weatherStateName = 'Snowy';\r\n      }\r\n      else if(condition>299){\r\n        weatherStateName = 'Rainy';\r\n      }\r\n      else {\r\n        weatherStateName = 'Stormy';\r\n      }\r\n  \r\n      //Choosing correct weather icon\r\n  \r\n      let weatherIcon = 'lni lni-sun';\r\n  \r\n      switch(weatherStateName) {\r\n        case 'Sunny': weatherIcon = 'lni lni-sun';\r\n        break;\r\n        case 'Cloudy': weatherIcon = 'lni lni-cloud';\r\n        break;\r\n        case 'Rainy': weatherIcon = 'lni lni-rain';\r\n        break;\r\n        case 'Foggy': weatherIcon = 'lni lni-cloud';\r\n        break;\r\n        case 'Snowy': weatherIcon = 'lni lni-star-empty';\r\n        break;\r\n        case 'Stormy': weatherIcon = 'lni lni-thunder';\r\n        break;\r\n        default: weatherIcon = 'lni lni-sun';\r\n      }\r\n  \r\n\r\n    return (\r\n        <div className=\"weekday\">\r\n            <div className=\"date\">\r\n                <p className=\"month\">{month}</p>\r\n                <p className=\"day\">{day}</p>\r\n                <p className=\"day-name\">{dayOfWeek}</p>\r\n            </div>\r\n            <i className={weatherIcon}></i>\r\n            <div className=\"grid\">\r\n                <div className=\"grid-l\">\r\n                    <div className=\"item it1\">\r\n                        <p>D</p>\r\n                    </div>\r\n                    <div className=\"item\">\r\n                        <p>N</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"grid-r\">\r\n                    <div className=\"item-r it1\">\r\n                        <p className=\"day-temp\">{dayTemp} °C</p>\r\n                    </div>\r\n                    <div className=\"item-r\">\r\n                        <p className=\"night-temp\">{nightTemp} °C</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weekday;","import React from 'react';\r\nimport Weekday from './Weekday';\r\nimport '../Styles/Weekly.css';\r\n\r\n\r\nfunction Weekly({states}) {\r\n\r\n    let weekdays = states.weatherData.daily;\r\n    let currentTime = states.currentTime.Datetime;\r\n    let dayOfMonth = (currentTime[8]*10+currentTime[9]*1);\r\n    console.log(dayOfMonth);\r\n    let month = 'January';\r\n    let nextWeek = Array.from(weekdays).filter((item,index)=>{\r\n        return index > 0;\r\n    });\r\n\r\n    switch(currentTime[5]+currentTime[6]) {\r\n        case '01':\r\n            month = 'Jan'\r\n            break;\r\n        case '02':\r\n            month = 'Feb'\r\n            break;\r\n        case '03':\r\n            month = 'Mar'\r\n            break;\r\n        case '04':\r\n            month = 'Apr'\r\n            break;\r\n        case '05':\r\n            month = 'May'\r\n            break;\r\n        case '06':\r\n            month = 'Jun'\r\n            break;\r\n        case '07':\r\n            month = 'Jul'\r\n            break;\r\n        case '08':\r\n            month = 'Aug'\r\n            break;\r\n        case '09':\r\n            month = 'Sep'\r\n            break;\r\n        case '10':\r\n            month = 'Oct'\r\n            break;\r\n        case '11':\r\n            month = 'Nov'\r\n            break;\r\n        case '12':\r\n            month = 'Dec'\r\n            break;\r\n        default: month = 'Jan'\r\n    }\r\n\r\n    return (\r\n        <div className=\"weekly\">\r\n            {nextWeek.map((item,index)=>{\r\n                dayOfMonth = dayOfMonth+1;\r\n                let weatherCondition = item.weather[0].id;\r\n                let dayOfWeek = 'Fail';\r\n                let timeDifference = (item.dt - 1578297600)/86400;\r\n                console.log(timeDifference);\r\n                switch(timeDifference%7) {\r\n                    case 0:\r\n                        dayOfWeek = 'Mon'\r\n                        break;\r\n                    case 1:\r\n                        dayOfWeek = 'Tue'\r\n                        break;\r\n                    case 2:\r\n                        dayOfWeek = 'Wed'\r\n                        break;\r\n                    case 3:\r\n                        dayOfWeek = 'Thu'\r\n                        break;\r\n                    case 4:\r\n                        dayOfWeek = 'Fri'\r\n                        break;\r\n                    case 5:\r\n                        dayOfWeek = 'Sat'\r\n                        break;\r\n                    case 6:\r\n                        dayOfWeek = 'Sun'\r\n                        break;\r\n                    default: dayOfWeek = 'Mon'\r\n                }\r\n                return <Weekday key={index} day={dayOfMonth} month={month} dayOfWeek={dayOfWeek} \r\n                dayTemp={Math.round(item.feels_like.day)} nightTemp={Math.round(item.feels_like.night)} condition={weatherCondition}/>\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Weekly;","import React, {Component} from 'react';\nimport './Styles/App.css';\nimport Mainblock from './Components/Mainblock';\nimport Hourly from './Components/Hourly';\nimport Weekly from './Components/Weekly';\n\nclass App extends Component {\n  constructor() {\n    super() \n\n    this.state = {\n      weatherData: [],\n      userIp: 0,\n      cityName: '',\n      cityNameNoSpace: '',\n      userLat: 0,\n      userLng: 0,\n      currentDt: 0,\n      currentTime: undefined\n    }\n\n  }\n  \n\n  componentDidMount(){\n\n    fetch(\"https://geoip-db.com/json/\").then((data)=> {\n\n      return data.json();\n    }).then((ip)=>{\n\n      this.setState({userIp: ip.IPv4});\n      this.locateClient(this.state.userIp);\n    });\n\n  }\n\n\n  locateClient = (clientIp) => {\n    fetch(`https://ip-geolocation.whoisxmlapi.com/api/v1?apiKey=at_HyvaQXpJ8zwvqrqRf9GrqtZUa0p8C&ipAddress=${clientIp}`).then((data)=>{\n      return data.json();\n    }).then((locationInfo)=>{\n      this.setState({userLat: locationInfo.location.lat, userLng: locationInfo.location.lng, cityName: locationInfo.location.city});\n      let cityArray = Array.from(locationInfo.location.city);\n      let cityNameFiltered = '';\n      \n      cityArray.forEach((letter)=>{\n        cityNameFiltered = cityNameFiltered + letter;\n        return cityNameFiltered;\n      })\n      this.setState({cityNameNoSpace: cityNameFiltered});\n      this.getWeatherData(this.state.cityNameNoSpace);\n    });\n  }\n\n  getWeatherData = (userCity) => {\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.userLat}&lon=${this.state.userLng}&units=metric&appid=7a8a7c8376d6bf111c3dcf7410c26c1e`).then((data)=>{\n      return data.json();\n    }).then((weatherInfo)=>{\n      this.setState({weatherData: weatherInfo, currentDt: weatherInfo.current.dt});\n      console.log(this.state.weatherData);\n      this.getCurrentDate(this.state.weatherData.current.dt);\n    });\n  }\n\n  getCurrentDate = (timestamp) => {\n    fetch(`https://showcase.api.linx.twenty57.net/UnixTime/fromunixtimestamp?unixtimestamp=${timestamp}`).then(data=>{\n        return data.json();\n    }).then(data2=>{\n      this.setState({currentTime: data2});\n    })\n  }\n\n  render() {\n\n    let siteContent = <div></div>;\n\n    if(this.state.currentTime!==undefined) {\n\n      siteContent = <div className=\"whole-container\">\n      <div className=\"lside\">\n        <Mainblock states={this.state}/>\n        <Weekly states={this.state}/>\n      </div> \n      <Hourly states={this.state}/>\n    </div>;\n\n    document.querySelector('.loading-block').classList.add('disappears');\n    }\n\n    return (\n      <div>\n        <div className=\"loading-block\">\n          <p className=\"loading-text\">Hold on dude, it's loading</p>\n        </div>\n        {siteContent}\n      </div>\n    );\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}